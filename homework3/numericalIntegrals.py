import numpy as np

def gaussPoints(n):
  if n == 2:
    return [0.57735029692, -0.5773502692]
  elif n == 3:
    return [0.7745966692, 0, -0.7745966692]
  elif n == 4:
    return [0.8611363116, 0.3399810436, -0.3399810436, -0.8611363116]
  elif n==5:
    return [0.9061798459, 0.5384693101, 0, -0.5384693101, -0.9061798459]
  elif n==6: 
    return [0.6612093864662645, -0.6612093864662645, -0.2386191860831969,0.2386191860831969,-0.9324695142031521,0.9324695142031521]
  elif n==7:
    return [0, 0.4058451513773972, -0.4058451513773972,-0.7415311855993945,0.7415311855993945,-0.9491079123427585,0.9491079123427585]
  elif n==8:
    return [-0.1834346424956498,0.1834346424956498,-0.5255324099163290,0.5255324099163290,-0.7966664774136267,0.7966664774136267,-0.9602898564975363,0.9602898564975363]
  else:
    return [0,-0.8360311073266358,0.8360311073266358,-0.9681602395076261,0.9681602395076261,-0.3242534234038089,0.3242534234038089,-0.6133714327005904,0.6133714327005904]

def gaussWeights(n):
  if n == 2:
    return [1,1]
  elif n == 3:
    return [0.5555555556, 0.8888888889, 0.5555555556]
  elif n == 4:
    return [0.3478548451, 0.6521451549, 0.6521451549, 0.3478548451]
  elif n==5:
    return [0.2369268850, 0.4786286705, 0.5688888889, 0.4786286705, 0.2369268850]
  elif n==6:
    return [0.3607615730481386,0.3607615730481386,0.4679139345726910,0.4679139345726910,0.1713244923791704,0.1713244923791704]
  elif n==7:
    return [0.4179591836734694,0.3818300505051189,0.3818300505051189,0.2797053914892766,0.2797053914892766,0.1294849661688697,0.1294849661688697]
  elif n==8:
    return [0.3626837833783620,0.3626837833783620,0.3137066458778873,0.3137066458778873,0.2223810344533745,0.2223810344533745,0.1012285362903763,0.1012285362903763]
  else:
    return [0.3302393550012598,0.1806481606948574,0.1806481606948574,0.0812743883615744,0.0812743883615744,0.3123470770400029,0.3123470770400029,0.2606106964029354,0.2606106964029354]

def generateX(numPoints, start, finish):
  return [((finish-start)/(numPoints-1))*i+start for i in range(numPoints)]

def trapezoidal(x, y):
  return ((x[1]-x[0])/2)*(y[0] + 2 * np.sum([y[i] for i in range(1,len(y)-2)]) + y[len(y)-1])

def romberg(start, end, firstNumPoints, func):
  x1 = generateX(firstNumPoints, start, end)
  y1 = [func(x1[i]) for i in range(0,firstNumPoints)]
  x2 = generateX(firstNumPoints*2, start,end)
  y2 = [func(x2[i]) for i in range(0,firstNumPoints*2)]

  trap1 = trapezoidal(x1,y1)
  trap2 = trapezoidal(x2,y2)

  return trap2 + (trap2-trap1) / 3

def gaussQuadrature(a, b, func, numPoints):
  def t(x):
    return 0.5*((b-a)*x+a+b)
  scale = (b-a)/2

  x = gaussPoints(numPoints)
  w = gaussWeights(numPoints)

  terms = [func(t(x[i]))*w[i]*scale for i in range(len(x))]
  return sum(terms)
